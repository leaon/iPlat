<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

	<!-- ****************************************************************** -->
	<!-- *					   Struts2应用级初始化配置					      * -->
	<!-- *																  * -->
	<!-- * 初始化WEB应用各项设置。										  	  * -->
	<!-- ****************************************************************** -->
	
	
<struts>

	<!-- ================================================================== -->
	<!-- = 						Struts2初始化参数配置						  = -->
	<!-- ================================================================== -->
	
	<!-- 定Web应用的默认编码集，相当于调用 HttpServletRequest的setCharacterEncoding方法。 -->
	<constant name="struts.i18n.encoding" value="UTF-8" />

	<!-- 该属性设置是否每次HTTP请求到达时，系统都重新加载资源文件。该属性默认值是false。在开发阶段将该属性设置为true会更有利于开发， 
		但在产品发布阶段应将该属性设置为false。 -->
	<constant name="struts.i18n.reload" value="false" />

	<!-- 该属性指定Struts 2应用所需要的国际化资源文件，如果有多份国际化资源文件，则多个资源文件的文件名以英文逗号（,）隔开。 -->
	<constant name="struts.custom.i18n.resources" value="application" />

	<!-- 该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts 2处理。如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（，）隔开。 -->
	<constant name="struts.action.extension" value="action,shtml,do" />

	<!-- 当struts 2的配置文件修改后，系统是否自动重新加载该文件，默认值为false（生产环境下使用），开发阶段最好打开。 -->
	<constant name="struts.configuration.xml.reload" value="false" />

	<!-- 该属性指定Struts 2框架默认加载的配置文件，如果需要指定默认加载多个配置文件，则多个配置文件的文件名之间以英文逗号(,)隔开。该属性的默认值为struts- 
		default.xml,struts-plugin.xml, struts.xml，看到该属性值，读者应该明白为什么Struts 2框架默认加载struts.xml文件了。 -->
	<constant name="struts.configuration.files"	value="struts-default.xml,struts-plugin.xml,struts.xml" />

	<!-- 定加载struts2配置文件管理器，默认为org.apache.struts2.config.DefaultConfiguration，开发者可以自定义配置文件管理器，该类要实现Configuration接口，可以自动加载struts2配置文件。 -->
	<constant name="struts.configuration" value="org.apache.struts2.config.DefaultConfiguration" />

	<!-- 含有Actions的完整连续的package名称。 -->
	<!-- <constant name="struts.continuations.package" value="" /> -->

	<!-- 该属性设置浏览器是否缓存静态内容。当应用处于开发阶段时，我们希望每次请求都获得服务器的最新响应，则可设置该属性为false。 -->
	<constant name="struts.serve.static.browserCache" value="false" />

	<!-- 该属性设置Struts 2是否支持动态方法调用，该属性的默认值是true。如果需要关闭动态方法调用，则可设置该属性为false。 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="false" />

	<!-- 该属性设置Struts 2是否允许在Action名中使用斜线，该属性的默认值是false。如果开发者希望允许在Action名中使用斜线，则可设置该属性为true。 -->
	<constant name="struts.enable.SlashesInActionNames" value="false" />

	<!-- 该属性指定是否允许在Struts 2标签中使用表达式语法，因为通常都需要在标签中使用表达式语法，故此属性应该设置为true，该属性的默认值是true。 -->
	<constant name="struts.tag.altSyntax" value="true" />

	<!-- 该属性设置Struts 2应用是否使用开发模式。如果设置该属性为true，则可以在应用出错时显示更多、更友好的出错提示。该属性只接受true和flase两个值，该属性的默认值是false。通常，应用在开发阶段，将该属性设置为true，当进入产品发布阶段后，则该属性设置为false。 -->
	<constant name="struts.devMode" value="true" />

	<!-- 该属性指定视图标签默认的视图主题，该属性的默认值是xhtml，可以为simple,xhtml或ajax。 -->
	<constant name="struts.ui.theme" value="xhtml" />

	<!-- 该属性指定视图主题所需要模板文件的位置，该属性的默认值是template，即默认加载template路径下的模板文件。 -->
	<constant name="struts.ui.templateDir" value="../commons/template" />

	<!-- 该属性指定模板文件的后缀，该属性的默认属性值是ftl。该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、 Velocity和JSP模板。 -->
	<constant name="struts.ui.templateSuffix" value="ftl" />

	<!-- 该属性指定Velocity框架所需的velocity.properties文件的位置。该属性的默认值为 velocity.properties。 -->
	<constant name="struts.velocity.configfile" value="velocity.properties" />

	<!-- 该属性指定Velocity框架的Context位置，如果该框架有多个Context，则多个Context之间以英文逗号（,）隔开。 -->
	<!-- <constant name="struts.velocity.contexts" value="" /> -->

	<!-- 该属性指定Velocity框架的toolbox的位置。 -->
	<!-- <constant name="struts.velocity.toolboxlocation" value="" /> -->

	<!-- 该属性指定Web应用所在的监听端口。该属性通常没有太大的用处，只是当Struts 2需要生成URL时（例如Url标签），该属性才提供Web应用的默认端口。 -->
	<constant name="struts.url.http.port" value="80" />

	<!-- 该属性类似于struts.url.http.port属性的作用，区别是该属性指定的是Web应用的加密服务端口。 -->
	<constant name="struts.url.https.port" value="443" />

	<!-- 该属性指定Struts 2生成URL时是否包含请求参数。该属性接受none、get和all三个属性值，分别对应于不包含、仅包含GET类型请求参数和包含全部请求参数。 -->
	<constant name="struts.url.includeParams" value="none|get|all" />

	<!-- 对于某些Java EE服务器，不支持HttpServlet Request调用getParameterMap()方法，此时可以设置该属性值为true来解决该问题。该属性的默认值是false。对于 
		WebLogic、Orion和OC4J服务器，通常应该设置该属性为true。 -->
	<constant name="struts.dispatcher.parametersWorkaround" value="false" />

	<!-- 该属性指定Struts 2使用的FreeMarker管理器。该属性的默认值是org.apache.struts2.views.freemarker.FreemarkerManager，这是 
		Struts 2内建的FreeMarker管理器。 -->
	<constant name="struts.freemarker.manager.classname" value="org.apache.struts2.views.freemarker.FreemarkerManager" />

	<!-- 该属性只支持true和false两个属性值，默认值是true。通常无需修改该属性值。 -->
	<constant name="struts.freemarker.wrapper.altMap" value="true" />

	<!-- 设置是否对freemarker的模板设置缓存,效果相当于把template拷贝到 WEB_APP/templates。 -->
	<!-- <cosntant name="struts.freemarker.templatesCache" value="false" /> -->

	<!-- 该属性指定XSLT Result是否使用样式表缓存。当应用处于开发阶段时，该属性通常被设置为true；当应用处于产品使用阶段时，该属性通常被设置为false。 -->
	<constant name="struts.xslt.nocache" value="true" />

	<!-- 定义Struts2应用加载用户自定义的属性文件，该自定义属性文件指定的属性不会覆盖struts.properties文件中指定的属性。如果需要加载多个自定义属性文件，多个自定义属性文件的文件名以英文逗号（,）隔开。(也就是说不要改写struts.properties!) -->
	<constant name="struts.custom.properties" value="" />

	<!-- 默认的国际化地区信息。 -->
	<constant name="struts.locale" value="zh_CN" />

	<!-- 定义请求url与action映射器，默认为org.apache.struts2.dispatcher.mapper.DefaultActionMapper -->
	<constant name="struts.mapper.class" value="org.apache.struts2.dispatcher.mapper.DefaultActionMapper" />

	<!-- 定义是否一直在最后一个slash之前的任何位置选定namespace -->
	<!-- <cosntant name="struts.mapper.alwaysSelectFullNamespace" value="false" /> -->

	<!-- multipart请求信息的最大尺寸（文件上传用，该属性指定Struts 2文件上传中整个请求内容允许的最大字节数）。 -->
	<constant name="struts.multipart.maxSize" value="2097152" />

	<!-- 该属性指定处理 MIME-type multipart/form-data，文件上传（cos、pell、jakarta） 专为multipart请求信息使用的org.apache.struts2.dispatcher.multipart.MultiPartRequest解析器接口（文件上传用)。 -->
	<constant name="struts.multipart.parser" value="cos" />

	<!-- 定义上传文件时的临时目录，默认使用 javax.servlet.context.tempdir。 -->
	<!-- <constant name="struts.multipart.saveDir" value="" /> -->

	<!-- 该属性指定Struts 2中的Action由Spring容器创建。 -->
	<constant name="struts.objectFactory" value="org.apache.struts2.spring.StrutsSpringObjectFactory" />

	<!-- 定义spring框架的装配模式，装配方式有: name, type, auto, and constructor (name 是默认装配模式) -->
	<constant name="struts.objectFactory.spring.autoWire" value="name" />

	<!-- 该属性指定整合spring时，是否对bean进行缓存，值为true or false,默认为true。 -->
	<constant name="struts.objectFactory.spring.useClassCache" value="true" />
	
	<!-- ================================================================== -->
	<!-- = 						Struts2文件加载配置						  = -->
	<!-- ================================================================== -->
	
<!-- 	<include file="*/*-struts.xml" /> -->
	
	
	<!-- ================================================================== -->
	<!-- = 					   Struts2缺省的包信息配置						  = -->
	<!-- ================================================================== -->
	
	<package name="iplat-default" extends="struts-default">
		
		<!-- 
			基于paramsPrepareParamsStack， 
                            增加store interceptor保证actionMessage在redirect后不会丢失。 
         --> 
        <interceptors>  
            <interceptor-stack name="redirectParamReachableStack">  
                <interceptor-ref name="store">  
                    <param name="operationMode">AUTOMATIC</param>  
                </interceptor-ref>  
                <interceptor-ref name="paramsPrepareParamsStack" />  
            </interceptor-stack>  
        </interceptors>  
  
        <default-interceptor-ref name="redirectParamReachableStack" />  
		
		<!-- 全局结果视图 -->
		<global-results>
			<!-- 登录页面 -->
			<result name="login" type="redirect">
				/login.jsp
			</result>
		
			<!-- 业务操作错误结果页面 -->
			<result name="error" type="redirect">
				/error.jsp
			</result>
			
			<!-- 未知异常结果页面 -->
			<result name="unhandledException" type="redirect">
				/fail.jsp
			</result>
		</global-results>
		
		<!-- 全局异常处理器 -->
		<global-exception-mappings>
			<!-- 未知异常处理器 -->
			<exception-mapping result="unhandledException" exception="java.lang.Exception">
			</exception-mapping>
			
			<!-- 业务异常处理器 -->
			<exception-mapping result="error" exception="org.leoan.iplat.core.common.exception.BizException">
			</exception-mapping>
		</global-exception-mappings>
		
		<action name=""></action>
	</package>
	 	
	
	<!-- ================================================================== -->
	<!-- = 						Struts2异常处理配置						  = -->
	<!-- ================================================================== -->
	
	<!-- <bean name="handler1" type="com.opensymphony.xwork2.UnknownHandler" class="org.leaon."/> -->
	<unknown-handler-stack>
		 <unknown-handler-ref name="handler1" />
	</unknown-handler-stack>

</struts>  
